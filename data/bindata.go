// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// api.txt
// api_test.txt
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x5f\x6f\xda\x30\x10\x7f\x4e\x3e\xc5\x4d\xea\x03\xa9\xaa\xe4\x9d\x25\x48\x0c\x36\x69\x0f\xab\xba\xb2\x3d\x4d\xd3\x64\x92\x03\xa2\x39\x8e\xe7\x5c\x06\x14\xf1\xdd\x27\xdb\x49\x08\xd0\xd0\x52\x5a\xed\x2d\xbe\xdc\xdd\xef\xcf\xf9\xe4\x20\x18\x96\x94\xc3\x1c\x05\x2a\x46\x98\xc0\x32\xa5\x05\x7c\x41\x62\x43\x99\xc2\x82\x48\x16\xfd\x20\x98\xa7\xb4\x28\xa7\x7e\x9c\x67\x01\xae\xd6\x0f\x0f\xeb\x20\x43\x62\x4c\xa6\xae\x64\xf1\x6f\x36\x47\x08\x43\xf0\xef\xaa\xef\xc1\xc0\x75\xf5\xf9\x73\x26\x73\x45\xf5\x51\x31\x31\x47\xb8\x4a\x45\x82\xab\x1b\xb8\x22\x36\xe5\x08\xfd\x08\xfc\x6f\xfa\xab\xd0\x69\x41\x30\x52\xc8\x08\xc1\x84\xdc\x59\x29\x62\xb0\x11\x13\x08\xc3\xaa\xcc\x1f\x31\x79\xcb\x32\x8d\xd4\x4b\xa6\x70\x5d\xfc\xe1\xfe\xf8\x83\x07\x3d\x54\x0a\x50\xa9\x5c\x79\xb0\x71\x9d\x5f\x37\xfa\x00\x11\x24\x53\xff\xe3\x0a\xe3\x5d\xfd\x58\xe5\xd2\xb4\x9c\x10\x23\xcc\x50\x18\x96\x4e\x3a\x33\x05\xef\x22\x10\x29\xd7\x1d\x1c\x85\x54\x2a\xe1\x3a\xdb\x53\xdd\x5a\x14\xf7\xfb\x55\xd5\x5b\xd7\x0d\x02\x0d\xd9\xd6\xd5\x50\x78\x73\x55\x6d\x16\x13\x52\x65\x4c\x2e\xad\xa5\x19\xd9\x0e\x78\x92\x8a\x79\x05\x0e\x85\x49\x82\x8d\xbb\xcb\xb0\x75\x9f\x52\xe4\x89\x99\x94\x69\x66\x75\x5b\x39\xbd\x56\x6e\xab\xd5\x75\x17\x88\x57\x0d\xb6\xeb\xff\xbe\x03\x0a\x8b\x92\x53\x27\x63\xeb\xc8\xce\xa2\x82\x32\xb2\xb1\xbe\xb1\xe9\x4e\xa1\x64\x0a\x0f\x27\x76\xc6\xf0\x13\x9c\xa1\x02\xdd\xd7\x1f\xf1\xbc\xc0\x9e\xe7\x3a\x76\x0a\x26\xf6\xb5\x44\xb5\xbe\xcf\x97\x87\x08\x26\x7e\x34\x84\x7b\x24\x95\xe2\xdf\x17\x3b\x57\xd7\xbf\x89\x77\x55\x7a\xd4\x59\xb0\xd9\xd6\xd2\x93\xe9\x23\xc2\x6b\x72\xdd\x77\xb0\xce\x18\x72\x6e\x1d\x68\x05\x9e\x5e\x86\x5d\x46\xed\xd4\x8f\x9f\xcf\xd6\x96\x2f\x8b\xf6\xbd\x30\xec\x8f\xa9\x0f\x39\x3f\xe3\x6a\xcc\x72\x05\xba\xb1\x7f\x8b\x2b\xea\x79\xd5\x6f\x63\x62\xff\xb4\x8b\x75\xdf\xc8\xd4\xb7\xae\x41\xcc\xc4\x90\x73\x18\x0c\xde\x1f\xe2\x36\xc0\x1a\xd9\x39\xf6\x22\x02\x26\x25\x8a\xe4\xd8\xa6\x1b\xb0\xa4\x3c\x43\xda\x10\x6e\x6e\x72\x7b\x3a\xdf\x65\x72\xc1\x52\xdb\xea\xff\xb3\xd4\x16\xfb\xb2\xa5\x7e\x62\xab\x2d\xc4\xe3\x5b\x3d\x46\x8e\x2f\x37\xce\x56\x3f\xcf\xb8\x33\x7d\xb1\xad\x2f\xf5\xa5\x79\x76\x4c\xfc\xe0\xe1\x31\x08\xa7\x6c\x69\x76\xbd\x39\x76\x49\x2d\x5e\x41\x6b\x7b\x81\x5f\x4b\xed\xde\x9e\x84\x21\xa0\x48\xb4\xd6\x7f\x01\x00\x00\xff\xff\xac\x1f\x93\x53\x40\x09\x00\x00")

func apiTxtBytes() ([]byte, error) {
	return bindataRead(
		_apiTxt,
		"api.txt",
	)
}

func apiTxt() (*asset, error) {
	bytes, err := apiTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.txt", size: 2368, mode: os.FileMode(420), modTime: time.Unix(1582830093, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _api_testTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x6d\x6f\xe3\x36\xf2\x7f\x6d\x7d\x8a\xa9\xd0\x14\x52\xd7\x2b\x77\xfb\xff\xdf\x1b\x37\x36\x90\x26\x5e\x74\xef\x9a\x87\x8b\xbd\xed\xe1\x72\xc1\x82\x96\xc6\x0e\x2f\x32\xa9\x90\x54\x9c\x34\xc8\x77\x3f\x0c\x29\xc9\x72\x2c\x3f\xc4\xd9\xc3\xa1\x7d\xd1\x58\x7c\x98\xf9\xcd\xf0\x37\xc3\x19\xb6\x9d\xce\x51\x6e\x24\x4c\x51\xa0\x62\x06\x13\x98\x73\x73\x03\xa7\x68\xd8\x51\xc6\xe1\xc6\x98\x4c\x77\x3b\x9d\x29\x37\x37\xf9\x38\x8a\xe5\xac\x83\x0f\x8f\x7f\xfc\xf1\xd8\x99\xa1\x61\x2c\xe3\x5e\xc6\xe2\x5b\x36\x45\x38\x3c\x84\xe8\xa2\xf8\xdd\xef\x7b\x1e\x9f\x65\x52\x19\x08\xbc\x96\x9f\x30\xc3\xc6\x4c\x63\x47\xdf\xa5\xbe\xd7\xf2\x51\xc4\x32\xe1\x62\xda\xf9\xb7\x96\x82\x06\x26\x33\x43\x7f\x52\x39\xa5\x3f\x52\xd3\xbf\x15\x4e\x52\x8c\xed\xb8\x36\x8a\x8b\xa9\x1d\x35\xa8\x0d\x17\x76\x99\xe1\x33\xf4\xbd\xd0\xf3\xee\x99\x02\x1a\x3f\x19\xc3\xf7\xfa\x2e\x8d\x4e\x7e\xb6\x43\xb1\x14\x13\x3e\x4d\xc6\x30\x63\xd9\x95\x13\x71\xcd\x85\x41\x35\x61\x31\x3e\x3d\x7b\xb1\x14\xda\x14\x1b\xcf\xd8\x0c\xa1\x07\x56\x3c\x19\xf2\x91\xa7\x78\xa1\x70\xc2\x1f\xa0\xdf\xf7\x3d\xaf\xd3\x81\x9e\xfb\x07\x6e\x30\xcd\x50\x69\x1a\x63\x5a\xe7\x33\xd4\xc0\x0a\x5d\xa9\x8c\x59\x9a\x8c\x23\x32\x0b\x26\x3c\x45\x60\xba\xeb\x75\x3a\x4f\xb4\x1f\x00\xfc\x5f\xa4\x36\x7e\x17\x7c\xbb\xf0\x86\x3e\xda\xe5\xd4\x85\x54\x76\xea\x2f\xff\xff\x7f\x3f\x2e\x46\x3f\x6b\x54\x34\x9a\x8c\x05\x9b\x61\x6d\x35\xd3\xba\x69\x9c\xec\x68\x1a\x1f\x0e\x7f\x3d\x95\x89\x9b\xe2\x9a\x8d\x53\xf4\xbd\x4e\xe7\xd9\x9b\xe4\x22\x86\x54\xb2\xe4\xd8\x1a\x10\x84\xf0\xe4\xb5\x26\x33\x13\x5d\x28\x2e\x4c\x2a\x02\x1f\x6a\xd3\x7e\xe8\xb5\xc8\xac\x36\xa0\x52\xd0\xed\x81\xd4\xd1\x79\x86\x22\xf0\x57\xed\xa7\xb5\x7c\x62\x17\x7e\xd3\x03\xc1\x53\x92\xdc\x4a\xe5\x34\xba\x60\x82\xc7\x24\xfa\x98\x09\x21\x0d\xc8\x0c\xc5\xb2\x03\xad\xef\x7c\xab\x25\x1a\x28\x25\x55\x10\x86\x5e\xeb\xd9\x6b\x25\x18\xcb\x04\xad\x6a\xd2\x11\x9d\xe1\xfc\xc4\x0d\x05\xb4\x25\xf4\x5a\xa4\xaf\x07\xc5\xba\xc8\x4d\x06\xdf\x95\x54\xd8\x19\xd3\x14\x0d\x58\x30\x05\xb0\x5c\x31\xc3\xa5\x20\x68\x4a\xce\xd6\xe1\x7b\xf6\x9c\x43\x63\x85\xcc\xe0\xc9\x38\x48\x2a\x46\xb6\x21\x71\x24\x73\x44\x6c\x83\x9c\x0b\x54\xc5\x57\x08\x01\x61\x42\x12\x65\x4f\x40\x6b\x32\x91\xce\x61\x98\xd1\x41\x4c\x02\xff\xf8\x72\x70\x34\x1a\xc0\xc9\xd1\xe8\xe8\xe7\xa3\xe1\x00\x0e\x34\x9c\xff\x7e\x36\xb8\x84\x03\xed\x97\xc2\x0b\xa9\xe1\xca\x11\xfa\xf0\x0e\xb4\x0e\xbd\xd6\x17\x77\x74\x3d\x48\xc6\xd1\xe0\x01\xe3\xc0\x8e\x2a\x34\xb9\x12\x15\x7c\x8d\x66\xf4\xc7\x12\xfa\x5d\x00\x0e\x07\x23\x18\x7d\x3a\x1d\xc0\x3f\xcf\xcf\x06\xf0\x79\x74\xec\xbf\x15\x47\xa2\x64\xb6\xc9\x89\xbb\xa0\x3a\xb9\x3c\xbf\xa8\x3b\xad\xf2\xd5\x5b\xc1\x29\x39\x1f\x3c\x70\x6d\xf4\x12\xbe\xbb\x1c\xd5\x63\x75\xc6\x4c\x4d\x35\x44\x51\x54\xcb\x3a\x84\xd9\x6e\x83\xb1\x94\xa9\x53\xb4\x30\xc0\x6d\x5f\x71\xec\xaf\x83\xe3\x11\x0c\xfe\xf1\x69\x38\x1a\x42\x70\xa0\x43\xbf\x50\xd4\x6c\x43\x39\x55\xd9\xf0\x77\x1a\xb8\x94\xf3\xc0\xce\x38\x58\x51\x14\x85\xd1\x30\x66\x22\xf8\xce\xe1\x59\xb5\xd0\x50\x9a\x68\xb0\xd1\x8e\x2f\x8e\xe0\x9e\xa5\x3c\x69\xb2\xc6\x6b\xd9\xa9\xd2\x99\x75\x87\xb5\xa1\xb4\xea\x03\x7c\xbc\x3c\x3f\x85\x6c\xfa\xc5\x8a\xd5\xf0\xfb\x2f\x83\xcb\x81\xd3\x21\x5c\x52\xfe\xf6\x83\x5f\x28\x5d\xc5\xc8\x05\x37\x23\x9b\xc1\x83\x15\x36\xd4\xd3\x9a\xd7\xca\xf4\x5d\xfa\x49\x4c\xe4\x0a\x43\x28\x0d\xf7\x0e\x34\xd0\x6d\x45\x7f\x73\x8d\xca\x7e\x33\xad\xe7\x52\x25\xf4\xdb\x7f\xe7\xb5\x5a\xbe\xd6\xe9\x4c\x26\xd8\xb3\x2c\x2a\x53\xca\x95\x4b\xea\xd7\xf5\x11\x9b\xcb\x97\x46\x6c\x1e\x5f\x5e\x43\x19\x7c\x69\xa4\xcc\xd1\xd7\xa1\xd7\x72\xb7\x52\xe9\x3a\xf2\xbc\xcb\xb3\x99\xd4\x66\xaa\x90\x00\x94\x06\xad\x3a\x85\x1c\x72\xca\xb8\x08\x66\xf0\x7d\x71\x5f\x46\xa7\xd6\x25\x9d\x0e\x7d\x53\x80\xe7\x99\x23\x48\xb7\xb7\xe4\xc3\xad\xf9\x31\x76\xf9\x71\xb1\x07\x1a\xf2\x60\xc9\xbd\x2a\x0f\x96\xe6\x2c\x2e\xdb\x55\xe7\x44\x41\x41\xa9\x9d\x41\x1c\x17\xe2\x37\x41\x28\x73\x99\xd3\xbc\xb3\xe8\x62\x5b\xb3\xe4\x4e\x47\xe5\xc2\xda\xa2\xbd\x16\x3e\x70\xf3\x1b\x4b\xc9\x91\xb3\xe8\x32\x17\x41\xe8\x55\x7e\x36\xc8\x54\x22\xe7\xa2\x8a\x45\x97\xd0\x56\xbd\xb1\x33\xae\x13\x2b\xa1\x09\x56\x4b\xea\x68\xf0\xc0\x4d\x50\x00\x0a\x89\x0e\xe6\x31\x43\x88\xe5\x2c\x63\x0a\x47\xf4\x9b\xf8\x11\xd4\xd2\x51\x1b\x96\x72\x13\x45\x71\x41\x22\x21\x8f\xdd\xbe\x40\xa1\xce\x53\xd3\x06\x7c\xc8\x30\x36\xab\x1b\x96\x4a\x86\x09\x65\xa1\x6a\x6f\x17\x0e\xee\xdb\x70\x70\x0f\xef\x01\x0e\x46\x6d\x38\x18\xc1\xbf\x84\xdf\x86\x65\x91\x2f\xbf\x2b\x46\x43\x60\x54\x8e\xe1\xe2\x42\xc0\x09\xcb\x53\xb3\x3f\xb0\x65\x01\x6f\x46\xe7\x26\xa0\xd7\xab\xa6\x4a\xa4\x54\x9d\xec\x0f\xb3\xb6\x7b\x5f\x8c\xc4\xc1\xa2\x0c\xc5\x34\xd1\x10\x33\x01\x63\x04\x26\x1e\x41\x2a\x2a\xa1\xd8\xc4\xa0\x82\x64\x0c\xce\x98\x36\x68\x09\x0a\x59\x42\xf8\x64\x63\xc9\x0c\x4c\x24\x90\x4a\x79\x0b\x94\x3c\x9c\xc2\x53\x96\x59\xe6\xb3\x5b\x0c\x9a\xcb\xec\xb0\xca\x33\xb6\x62\xfb\x2c\x66\x4c\xe9\x1b\x96\x06\x57\xd7\xe3\x47\x53\x7a\x67\x11\xfc\x6d\xf8\xae\x12\xbd\x39\x2c\x28\xdd\x3b\xea\x3b\xa3\x77\xc6\xb2\x0e\x8a\x13\xb3\x04\xa5\x92\xbc\x23\x14\xaf\x35\x91\x0a\x6e\xdb\x70\x4f\x50\x14\x13\x53\x84\x05\x3a\xda\xc3\x27\x70\x4f\x32\x2a\x23\xaf\x6e\xaf\xed\xc4\x12\x07\xfe\x86\x8f\xee\xe4\x2f\xed\x32\xf7\x7b\x60\x05\xd1\x6f\xbf\x4d\x3a\xea\x22\xda\x70\x1f\x92\x90\x82\x9a\x13\x96\x6a\xf4\x5a\xe4\x9c\xe7\x8a\xaf\x14\x4c\x8b\x22\xcf\x1a\xf9\x0a\x8e\x96\x47\xfe\x57\x2d\x45\xd5\x00\x58\x47\x9e\x16\x6e\x74\xf3\xaf\x3b\xb4\xf5\xd2\xaa\x68\xdb\x49\xda\x72\x00\x2d\x19\xb7\x2e\x84\xdc\xa2\x60\x61\x55\x58\x8d\x2d\xb0\x85\x1b\xc2\xbf\x68\x4b\xa3\x91\xe2\xb3\x61\xc6\x62\x0c\x56\x45\x86\x94\x1d\xd6\x2e\xac\xe9\x09\x6d\xf2\xe8\x74\xb8\xb1\x6d\x38\x98\x1b\x25\xf3\xe9\x0d\x20\x8b\x6f\x5c\x10\x83\x9c\x90\xa4\x3c\x36\x36\x12\x59\x96\xa5\x8f\x60\x6e\xaa\x04\x6f\x93\x3b\x75\x29\x60\x64\x7d\x1b\x75\xde\x09\x48\xb1\x74\x11\xcc\x58\xe6\x78\x80\x77\x39\x4b\x3f\xd2\xc2\x0d\x24\x68\xdb\xbd\x44\xe1\x5a\x60\xd5\xc4\x85\xae\xec\xb2\x2c\xc9\x2d\xf3\x5d\xf3\x1e\xfd\xc6\xd2\x1c\xcf\x27\x8b\xc3\xbc\x6f\x9a\xad\x88\x43\xf7\xd5\xf9\x64\x48\x6b\xf2\x88\x04\xdb\xdb\x94\x42\x8a\xd3\xd8\x0f\x3f\x01\x87\x43\xc8\xa3\xb3\x7c\xe6\x20\x87\x3f\x01\x7f\xf7\xce\xea\x25\x9e\x7c\x13\x14\x38\xaf\x0a\x49\x91\x5b\xc6\xc3\x88\xae\xd9\xeb\x30\xb8\x5f\x8c\x7c\x2a\xed\x0b\xc2\x36\xe4\x8d\xe3\xa1\x8b\xcc\x32\xa8\x66\xc6\x5d\xb9\x93\xc0\xb7\xab\xbb\x70\xa0\x37\x84\x68\x23\x86\x36\xbc\x12\xc2\xcb\x28\x16\x3c\x25\xa6\x78\x9d\x4e\x51\x88\x67\x18\xf3\x09\x8f\xc1\xf3\x0e\x0f\x8b\x94\xf3\x2d\x17\x09\x3e\xb4\xe1\x5b\xb7\xa4\xdb\x83\x68\xe4\xca\xeb\x7e\xbf\x78\xf7\x38\x3c\x2c\x66\x2d\x2a\xe8\xf7\xed\x47\xf9\x0e\xb2\x32\x6b\xdf\x40\x6c\x51\x93\x30\xc3\xe0\x3d\x08\x69\xb0\x0b\x89\xcc\x49\xc1\x58\xb1\xf8\x16\x8d\x06\xee\xea\x22\xb7\x48\x20\x26\xa0\x89\xef\x30\x46\x33\x47\x14\x20\xcd\x0d\xaa\x39\xd7\x08\x44\x58\xcb\xb0\x4c\xa1\xc1\x04\x98\x06\x83\xb3\x2c\x25\xee\x33\x4b\xe3\xea\x5d\x67\x01\xe6\x98\x65\x43\x2e\xa6\x05\x26\xe8\xc1\xd5\x8f\xd7\xeb\x66\x9f\x6a\x26\xda\x52\x95\x20\x7d\x80\x7e\xbf\xdd\x34\xf1\x23\xc9\x7b\x76\x6f\x49\x79\x96\x30\x83\x1b\xb4\xae\x9b\x5a\xa3\x90\x5c\xf7\x32\x46\x75\xf1\x44\x65\x47\x97\xe4\x2d\xd4\x34\xc7\xda\x93\x57\x5b\xee\x86\x4f\x59\xf6\xd1\x5d\xf3\xfd\xbe\xcb\x22\xd5\x6b\x95\xad\x52\xbb\x6b\x11\x97\xcd\x2c\xde\xa3\xd2\x8d\x38\x82\x15\x2a\xc0\xd5\x5a\x9f\x87\x55\x4d\xb4\x69\xcd\x53\x3d\xa6\x53\x14\xab\x2a\x42\x78\x0f\x1f\x28\xd8\xfb\x2e\xe8\xdf\xbf\xb7\x81\x58\xd6\x5b\x94\xfb\x50\x2c\x12\xd6\xca\xfe\x2b\x7e\x1d\xd6\x62\x66\xa9\x33\x72\x5d\x83\x0d\x87\x46\x7b\xcd\xa2\x69\x1a\xad\x3e\x87\xf5\x7a\x5b\xf6\xfb\xa1\x57\x55\x3c\x5b\x55\xad\x6f\x4a\x16\x99\x66\xa9\xd9\x59\x2b\xcb\x76\xfe\x2f\x7a\x02\xc0\x54\xa3\x95\xf6\xe2\x95\xe0\x44\x0a\xec\x6e\x93\xe8\x97\xd7\x34\xf5\xec\xd5\x15\x5d\x7f\x14\x28\xfb\x98\xf5\xa9\x64\x37\xd3\x6a\x32\x9b\xcc\xb0\x32\xbe\x29\x5e\x4d\x96\x05\xd4\xd1\x34\x90\xc8\x9d\x3e\x26\x30\x57\x52\x4c\x41\x1b\x66\x72\x0d\xb1\x4c\xb0\x0b\x53\x69\xa8\x26\x98\x33\x61\x5c\xb6\x2e\x0d\x75\x2d\xc7\x56\xef\xd5\x54\xfb\x4b\x8f\x7f\x0b\x8e\xad\x8b\x80\x1d\x29\xb6\x6e\xbb\x65\x58\x75\x57\x17\xc7\xb2\x21\x4d\x5e\xfd\x70\x1d\x6d\x03\xf4\x6a\x22\xae\xcd\x8e\xfb\xf2\x70\x83\xb5\xb5\x76\xbe\xa1\x5a\xd9\x62\x7a\x7b\x53\x92\xdd\x62\x31\xcb\xf8\x82\x43\xb9\x70\x45\x0c\x26\x45\x45\x18\x35\x92\xb5\x4e\x83\x4b\x34\x8a\xe3\xfd\xfe\x44\xd8\x26\x60\x1f\x2a\x6c\x07\xf5\x0a\x32\x6c\x13\xb6\x07\x1d\x76\xb0\xd9\xe6\xa5\x3f\x31\x1f\x8e\xd2\x74\xaf\xab\x67\xcb\x7e\xcb\x86\x2f\xbb\x11\xe1\xc3\x9f\x3f\x27\xbc\x24\xfe\x56\xef\xee\xc1\xeb\x35\xb2\xde\x40\xeb\xf5\x67\x57\xbe\x2d\xba\x5a\x0c\xc6\x18\xb3\x9c\x0a\xe5\x8c\x03\xd7\x70\x32\x18\x1e\xb7\xe1\xaa\x7b\x4d\x1f\x3a\xe5\x31\x52\x3f\xc8\xd2\x14\x98\x52\xec\x11\x30\xc5\x19\x0a\xf7\x22\x69\xdb\x37\xdb\x67\xad\x2f\xeb\x36\xb2\xa3\x4b\xe5\x93\x2d\xd1\xda\xf0\xe5\xe5\x4b\x86\xb5\x71\x4d\xf8\x5d\xf1\xeb\xb2\x7f\xb4\x3f\x37\xc7\x5a\xc3\x49\xbc\x29\xda\xac\x07\x9f\x3d\xdb\x1e\x55\x41\xf7\x79\x63\x35\xbf\x35\xe6\x36\x6f\x6f\x4a\xc0\x9b\xdb\x87\x68\x1b\x9e\x57\xb0\x74\xb3\xa8\x3d\x48\xba\xd5\xd8\x8d\x99\x77\xb3\xe1\xff\xcb\xc4\x7b\x82\x29\xbe\x81\x03\x9b\xb7\xd7\x2b\xfe\x6d\x97\xef\x36\x20\xaf\x38\xfc\xcd\xa2\xf6\x38\xfc\xad\x56\xd2\xe1\x57\xff\x6d\xf4\xab\x97\x19\xbd\xd7\x1f\xbc\xab\xe2\x2f\xe5\xdc\x95\xf1\x67\xf2\x52\xce\xfd\x65\x4b\x17\xc2\xf5\x5d\x4a\x62\xed\x22\xfd\xe2\xc5\xf5\x35\xf5\x87\xfb\xff\x63\x84\x2c\x30\xf8\x36\xef\x2c\x14\x7e\x95\x1a\xc9\xbd\xf8\xac\x32\x78\xdf\xc2\x61\xe3\xee\x3a\x7f\xb7\xa8\x79\x35\x3d\xbf\xde\xfd\xb9\xcd\x84\x37\x14\x04\xff\xad\x8a\xc0\xca\x4d\x51\x94\xef\x9b\xd0\x87\x1f\xbe\x36\xbf\xf7\xa9\x35\x1a\x18\x4c\x64\x3b\x3c\x04\x14\x09\xf4\xfb\xff\x09\x00\x00\xff\xff\xc8\x7f\x27\x3e\x12\x26\x00\x00")

func api_testTxtBytes() ([]byte, error) {
	return bindataRead(
		_api_testTxt,
		"api_test.txt",
	)
}

func api_testTxt() (*asset, error) {
	bytes, err := api_testTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api_test.txt", size: 9746, mode: os.FileMode(420), modTime: time.Unix(1582911957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.txt":      apiTxt,
	"api_test.txt": api_testTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.txt":      &bintree{apiTxt, map[string]*bintree{}},
	"api_test.txt": &bintree{api_testTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
