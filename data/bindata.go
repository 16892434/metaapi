// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// api.txt
// api_test.txt
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x5f\x6f\xda\x30\x10\x7f\x4e\x3e\xc5\x4d\xea\x03\xa9\xaa\xe4\x9d\x25\x48\x0c\x36\x69\x0f\xab\xba\xb2\x3d\x4d\xd3\x64\x92\x03\xa2\x39\x8e\xe7\x5c\x06\x14\xf1\xdd\x27\xdb\x49\x08\xd0\xd0\x52\x5a\xed\x2d\xbe\xdc\xdd\xef\xcf\xf9\xe4\x20\x18\x96\x94\xc3\x1c\x05\x2a\x46\x98\xc0\x32\xa5\x05\x7c\x41\x62\x43\x99\xc2\x82\x48\x16\xfd\x20\x98\xa7\xb4\x28\xa7\x7e\x9c\x67\x01\xae\xd6\x0f\x0f\xeb\x20\x43\x62\x4c\xa6\xae\x64\xf1\x6f\x36\x47\x08\x43\xf0\xef\xaa\xef\xc1\xc0\x75\xf5\xf9\x73\x26\x73\x45\xf5\x51\x31\x31\x47\xb8\x4a\x45\x82\xab\x1b\xb8\x22\x36\xe5\x08\xfd\x08\xfc\x6f\xfa\xab\xd0\x69\x41\x30\x52\xc8\x08\xc1\x84\xdc\x59\x29\x62\xb0\x11\x13\x08\xc3\xaa\xcc\x1f\x31\x79\xcb\x32\x8d\xd4\x4b\xa6\x70\x5d\xfc\xe1\xfe\xf8\x83\x07\x3d\x54\x0a\x50\xa9\x5c\x79\xb0\x71\x9d\x5f\x37\xfa\x00\x11\x24\x53\xff\xe3\x0a\xe3\x5d\xfd\x58\xe5\xd2\xb4\x9c\x10\x23\xcc\x50\x18\x96\x4e\x3a\x33\x05\xef\x22\x10\x29\xd7\x1d\x1c\x85\x54\x2a\xe1\x3a\xdb\x53\xdd\x5a\x14\xf7\xfb\x55\xd5\x5b\xd7\x0d\x02\x0d\xd9\xd6\xd5\x50\x78\x73\x55\x6d\x16\x13\x52\x65\x4c\x2e\xad\xa5\x19\xd9\x0e\x78\x92\x8a\x79\x05\x0e\x85\x49\x82\x8d\xbb\xcb\xb0\x75\x9f\x52\xe4\x89\x99\x94\x69\x66\x75\x5b\x39\xbd\x56\x6e\xab\xd5\x75\x17\x88\x57\x0d\xb6\xeb\xff\xbe\x03\x0a\x8b\x92\x53\x27\x63\xeb\xc8\xce\xa2\x82\x32\xb2\xb1\xbe\xb1\xe9\x4e\xa1\x64\x0a\x0f\x27\x76\xc6\xf0\x13\x9c\xa1\x02\xdd\xd7\x1f\xf1\xbc\xc0\x9e\xe7\x3a\x76\x0a\x26\xf6\xb5\x44\xb5\xbe\xcf\x97\x87\x08\x26\x7e\x34\x84\x7b\x24\x95\xe2\xdf\x17\x3b\x57\xd7\xbf\x89\x77\x55\x7a\xd4\x59\xb0\xd9\xd6\xd2\x93\xe9\x23\xc2\x6b\x72\xdd\x77\xb0\xce\x18\x72\x6e\x1d\x68\x05\x9e\x5e\x86\x5d\x46\xed\xd4\x8f\x9f\xcf\xd6\x96\x2f\x8b\xf6\xbd\x30\xec\x8f\xa9\x0f\x39\x3f\xe3\x6a\xcc\x72\x05\xba\xb1\x7f\x8b\x2b\xea\x79\xd5\x6f\x63\x62\xff\xb4\x8b\x75\xdf\xc8\xd4\xb7\xae\x41\xcc\xc4\x90\x73\x18\x0c\xde\x1f\xe2\x36\xc0\x1a\xd9\x39\xf6\x22\x02\x26\x25\x8a\xe4\xd8\xa6\x1b\xb0\xa4\x3c\x43\xda\x10\x6e\x6e\x72\x7b\x3a\xdf\x65\x72\xc1\x52\xdb\xea\xff\xb3\xd4\x16\xfb\xb2\xa5\x7e\x62\xab\x2d\xc4\xe3\x5b\x3d\x46\x8e\x2f\x37\xce\x56\x3f\xcf\xb8\x33\x7d\xb1\xad\x2f\xf5\xa5\x79\x76\x4c\xfc\xe0\xe1\x31\x08\xa7\x6c\x69\x76\xbd\x39\x76\x49\x2d\x5e\x41\x6b\x7b\x81\x5f\x4b\xed\xde\x9e\x84\x21\xa0\x48\xb4\xd6\x7f\x01\x00\x00\xff\xff\xac\x1f\x93\x53\x40\x09\x00\x00")

func apiTxtBytes() ([]byte, error) {
	return bindataRead(
		_apiTxt,
		"api.txt",
	)
}

func apiTxt() (*asset, error) {
	bytes, err := apiTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.txt", size: 2368, mode: os.FileMode(420), modTime: time.Unix(1582830093, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _api_testTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdb\x72\xe3\x36\xd2\xbe\x16\x9f\xa2\xc3\x8a\xa7\xc8\x8c\x86\x9c\x99\xff\xdf\x1b\xc5\x52\x95\x63\x6b\x2a\xb3\x1b\x1f\x56\xd2\x24\x5b\xeb\x75\x4d\x41\x64\x4b\xc6\x9a\x04\x68\x00\xb4\xec\x71\xf9\xdd\xb7\x00\xf0\x24\x8b\x3a\x58\x9e\xad\xad\xe4\x22\x16\x71\xe8\xfe\xba\xf1\x75\xa3\x1b\x49\x18\x1e\xe5\x8a\xc3\x1c\x19\x0a\xa2\x30\x86\x05\x55\xd7\x70\x8a\x8a\x1c\x65\x14\xae\x95\xca\x64\x2f\x0c\xe7\x54\x5d\xe7\xd3\x20\xe2\x69\x88\xf7\x0f\xdf\xbe\x3d\x84\x29\x2a\x42\x32\xea\x64\x24\xba\x21\x73\x84\xc3\x43\x08\x2e\x8a\xdf\x83\x81\xe3\xd0\x34\xe3\x42\x81\xe7\x74\xdc\x98\x28\x32\x25\x12\x43\x79\x9b\xb8\x4e\xc7\x45\x16\xf1\x98\xb2\x79\xf8\x6f\xc9\x99\x1e\x98\xa5\x4a\xff\x49\xf8\x5c\xff\xe1\x52\xff\x5b\xe0\x2c\xc1\xc8\x8c\x4b\x25\x28\x9b\x9b\x51\x85\x52\x51\x66\x96\x29\x9a\xa2\xeb\xf8\x8e\x73\x47\x04\xe8\xf1\x93\x29\xfc\x24\x6f\x93\xe0\xe4\x17\x33\x14\x71\x36\xa3\xf3\x78\x0a\x29\xc9\x2e\xad\x88\x2b\xca\x14\x8a\x19\x89\xf0\xf1\xc9\x89\x38\x93\xaa\xd8\x78\x46\x52\x84\x3e\x18\xf1\xda\x90\x4f\x34\xc1\x0b\x81\x33\x7a\x0f\x83\x81\xeb\x38\x61\x08\x7d\xfb\x0f\x5c\x63\x92\xa1\x90\x7a\x8c\x48\x99\xa7\x28\x81\x14\xba\x12\x1e\x91\x24\x9e\x06\xda\x2c\x98\xd1\x04\x81\xc8\x9e\x13\x86\x8f\x7a\x3f\x00\xb8\xbf\x72\xa9\xdc\x1e\xb8\x66\xe1\xb5\xfe\xe8\x96\x53\x17\x5c\x98\xa9\xbf\xfc\xff\xff\x7d\xac\x47\xbf\x48\x14\x7a\x34\x9e\x32\x92\x62\x63\x35\x91\xb2\x6d\x5c\xdb\xd1\x36\x3e\x1e\xff\x76\xca\x63\x3b\x45\x25\x99\x26\xe8\x3a\x61\xf8\xe4\xcc\x72\x16\x41\xc2\x49\x7c\x6c\x0c\xf0\x7c\x78\x74\x3a\xb3\x54\x05\x17\x82\x32\x95\x30\xcf\x85\xc6\xb4\xeb\x3b\x1d\x6d\x56\x17\x50\x08\xe8\xf5\x81\xcb\xe0\x3c\x43\xe6\xb9\xab\xf6\xeb\xb5\x74\x66\x16\xfe\xd0\x07\x46\x13\x2d\xb9\x93\xf0\x79\x70\x41\x18\x8d\xb4\xe8\x63\xc2\x18\x57\xc0\x33\x64\xcb\x0e\x34\xbe\x73\x8d\x96\x60\x28\x04\x17\x9e\xef\x3b\x9d\x27\xa7\x13\x63\xc4\x63\x34\xaa\xb5\x8e\xe0\x0c\x17\x27\x76\xc8\xd3\x5b\x7c\xa7\xa3\xf5\xf5\xa1\x58\x17\xd8\x49\xef\x4d\x49\x85\x9d\x31\xcd\x51\x81\x01\x53\x00\xcb\x05\x51\x94\x33\x0d\x4d\xf0\x74\x1d\xbe\x27\xc7\x3a\x34\x12\x48\x14\x9e\x4c\xbd\xb8\x62\x64\x17\x62\x4b\x32\x4b\xc4\x2e\xf0\x05\x43\x51\x7c\xf9\xe0\x69\x4c\xa8\x45\x99\x13\x90\x52\x9b\xa8\xcf\x61\x9c\xe9\x83\x98\x79\xee\xf1\x68\x78\x34\x19\xc2\xc9\xd1\xe4\xe8\x97\xa3\xf1\x10\x0e\x24\x9c\xff\x71\x36\x1c\xc1\x81\x74\x4b\xe1\x85\x54\x7f\xe5\x08\x5d\x78\x0b\x52\xfa\x4e\xe7\xab\x3d\xba\x3e\xc4\xd3\x60\x78\x8f\x91\x67\x46\x05\xaa\x5c\xb0\x0a\xbe\x44\x35\xf9\xb6\x84\x7e\x17\x80\xe3\xe1\x04\x26\x9f\x4f\x87\xf0\xcf\xf3\xb3\x21\x7c\x99\x1c\xbb\xaf\xc5\x11\x0b\x9e\x6d\x72\xe2\x2e\xa8\x4e\x46\xe7\x17\x4d\xa7\x55\xbe\x7a\x2d\x38\xc1\x17\xc3\x7b\x2a\x95\x5c\xc2\x77\x9b\xa3\x78\xa8\xce\x98\x88\xb9\x84\x20\x08\x1a\x59\x47\x63\x36\xdb\x60\xca\x79\x62\x15\xd5\x06\xd8\xed\x2b\x8e\xfd\x6d\x78\x3c\x81\xe1\x3f\x3e\x8f\x27\x63\xf0\x0e\xa4\xef\x16\x8a\xda\x6d\x28\xa7\x2a\x1b\xfe\xae\x07\x46\x7c\xe1\x99\x19\x0b\x2b\x08\x02\x3f\x18\x47\x84\x79\x6f\x2c\x9e\x55\x0b\x95\x4e\x13\x2d\x36\x9a\xf1\xfa\x08\xee\x48\x42\xe3\x36\x6b\x9c\x8e\x99\x2a\x9d\xd9\x74\x58\x17\x4a\xab\x3e\xc0\xa7\xd1\xf9\x29\x64\xf3\xaf\x46\xac\x84\x3f\x7e\x1d\x8e\x86\x56\x07\xb3\x49\xf9\xc7\x0f\x6e\xa1\x74\x15\x23\x65\x54\x4d\x4c\x06\xf7\x56\xd8\xd0\x4c\x6b\x4e\x27\x93\xb7\xc9\x67\x36\xe3\x2b\x0c\xd1\x69\xb8\x7f\x20\x41\xdf\x56\xfa\x6f\x2e\x51\x98\x6f\x22\xe5\x82\x8b\x58\xff\x76\xdf\x3a\x9d\x8e\x2b\x65\x92\xf2\x18\xfb\x86\x45\x65\x4a\xb9\xb4\x49\xfd\xaa\x39\x62\x72\xf9\xd2\x88\xc9\xe3\xcb\x6b\x74\x06\x5f\x1a\x29\x73\xf4\x95\xef\x74\xec\xad\x54\xba\x4e\x7b\xde\xe6\xd9\x8c\x4b\x35\x17\xa8\x01\x94\x06\xad\x3a\x45\x3b\xe4\x94\x50\xe6\xa5\xf0\x53\x71\x5f\x06\xa7\xc6\x25\x61\xa8\xbf\x75\x80\xe7\x99\x25\x48\xaf\xbf\xe4\xc3\xad\xf9\x31\xb2\xf9\xb1\xde\x03\x2d\x79\xb0\xe4\x5e\x95\x07\x4b\x73\xea\xcb\x76\xd5\x39\x81\x57\x50\x6a\x67\x10\xc7\x85\xf8\x4d\x10\xca\x5c\x66\x35\xef\x2c\xba\xd8\xd6\x2e\x39\x0c\x45\xce\x8c\x2d\xd2\xe9\xe0\x3d\x55\xbf\x93\x44\x3b\x32\x0d\x46\x39\xf3\x7c\xa7\xf2\xb3\x42\x22\x62\xbe\x60\x55\x2c\xda\x84\xb6\xea\x8d\x9d\x71\x9d\x18\x09\x6d\xb0\x3a\x5c\x06\xc3\x7b\xaa\xbc\x02\x90\xaf\xe9\xa0\x1e\x32\x84\x88\xa7\x19\x11\x38\xd1\xbf\x35\x3f\xbc\x46\x3a\xea\xc2\x52\x6e\xd2\x51\x5c\x90\x88\xf1\x63\xbb\xcf\x13\x28\xf3\x44\x75\x01\xef\x33\x8c\xd4\xea\x86\xa5\x92\x61\xa6\xb3\x50\xb5\xb7\x07\x07\x77\x5d\x38\xb8\x83\x77\x00\x07\x93\x2e\x1c\x4c\xe0\x5f\xcc\xed\xc2\xb2\xc8\xe7\xdf\x15\xa3\xc1\x53\x22\x47\xbf\xbe\x10\x70\x46\xf2\x44\xed\x0f\x6c\x59\xc0\xab\xd1\xd9\x09\xe8\xf7\xab\xa9\x12\xa9\xae\x4e\xf6\x87\xd9\xd8\xbd\x2f\x46\xcd\xc1\xa2\x0c\xc5\x24\x96\x10\x11\x06\x53\x04\xc2\x1e\x80\x0b\x5d\x42\x91\x99\x42\x01\xf1\x14\xac\x31\x5d\x90\x1c\x04\x92\x58\xe3\xe3\xad\x25\x33\x10\x16\x43\xc2\xf9\x0d\xe8\xe4\x61\x15\x9e\x92\xcc\x30\x9f\xdc\xa0\xd7\x5e\x66\xfb\x55\x9e\x31\x15\xdb\x17\x96\x12\x21\xaf\x49\xe2\x5d\x5e\x4d\x1f\x54\xe9\x9d\x3a\xf8\xbb\xf0\xa6\x12\xbd\x39\x2c\x74\xba\xb7\xd4\xb7\x46\xef\x8c\x65\x1d\x14\x2b\x66\x09\x4a\x25\x79\x47\x28\x4e\x67\xc6\x05\xdc\x74\xe1\x4e\x43\x11\x84\xcd\x11\x6a\x74\x7a\x0f\x9d\xc1\x9d\x96\x51\x19\x79\x79\x73\x65\x26\x96\x38\xf0\x37\x7c\xb0\x27\x3f\x32\xcb\xec\xef\xa1\x11\xa4\x7f\xbb\x5d\xad\xa3\x29\xa2\x0b\x77\xbe\x16\x52\x50\x73\x46\x12\x89\x4e\x47\x3b\xe7\xa9\xe2\xab\x0e\xa6\xba\xc8\x33\x46\xbe\x80\xa3\xe5\x91\xff\x55\x72\x56\x35\x00\xc6\x91\xa7\x85\x1b\xed\xfc\xcb\x0e\x6d\xbd\xb4\x2a\xda\x76\x92\xb6\x1c\x40\x4b\xc6\xad\x0b\x21\xbb\xc8\xab\xad\xf2\xab\xb1\x1a\x9b\xbf\x21\xfc\x8b\xb6\x34\x98\x08\x9a\x8e\x33\x12\xa1\xb7\x2a\xd2\xd7\xd9\x61\xed\xc2\x86\x1e\xdf\x24\x8f\x30\xa4\xca\xb4\xe1\xa0\xae\x05\xcf\xe7\xd7\x80\x24\xba\xb6\x41\x0c\x7c\xa6\x25\xe5\x91\x32\x91\x48\xb2\x2c\x79\x00\x75\x5d\x25\x78\x93\xdc\x75\x97\x02\x8a\x37\xb7\xe9\xce\x3b\x06\xce\x96\x2e\x82\x94\x64\x96\x07\x78\x9b\x93\xe4\x93\x5e\xb8\x81\x04\x5d\xb3\x57\x53\xb8\x11\x58\x0d\x71\xbe\x2d\xbb\x0c\x4b\x72\xc3\x7c\xdb\xbc\x07\xbf\x93\x24\xc7\xf3\x59\x7d\x98\x77\x6d\xb3\x15\x71\xf4\x7d\x75\x3e\x1b\xeb\x35\x79\xa0\x05\x9b\xdb\x54\x87\x14\xd5\x63\xef\x7f\x06\x0a\x87\x90\x07\x67\x79\x6a\x21\xfb\x3f\x03\x7d\xfb\xd6\xe8\xd5\x3c\xf9\xc1\x2b\x70\x5e\x16\x92\x02\xbb\x8c\xfa\x81\xbe\x66\xaf\x7c\xef\xae\x1e\xf9\x5c\xda\xe7\xf9\x5d\xc8\x5b\xc7\x7d\x1b\x99\x65\x50\xa5\xca\x5e\xb9\x33\xcf\x35\xab\x7b\x70\x20\x37\x84\x68\x2b\x86\x2e\xbc\x10\xc2\xf3\x28\x66\x34\xd1\x4c\x71\xc2\xb0\x28\xc4\x33\x8c\xe8\x8c\x46\xe0\x38\x87\x87\x45\xca\xf9\xd1\x4e\xf5\xfa\x10\x4c\x6c\x59\x3d\x18\x14\xef\x1d\x87\x87\xc5\xac\x41\x03\x83\x81\xf9\x28\xdf\x3f\x56\x66\xcd\xdb\x87\x29\x66\x62\xa2\x08\xbc\x03\xc6\x15\xf6\x20\xe6\xb9\x56\x30\x15\x24\xba\x41\x25\x81\xda\x7a\xc8\x2e\x62\x88\x31\x48\xcd\x73\x98\xa2\x5a\x20\x32\xe0\xea\x1a\xc5\x82\x4a\x04\x4d\x54\xc3\xac\x4c\xa0\xc2\x18\x88\x04\x85\x69\x96\x68\xce\x13\x43\xdf\xea\x3d\xa7\x06\x73\x4c\xb2\x31\x65\xf3\x02\x13\xf4\xe1\xf2\xe3\xd5\xba\xd9\xc7\x86\x89\xa6\x44\xd5\x90\x3e\xc0\x60\xd0\x6d\x9b\xf8\xa8\xe5\x3d\xd9\x37\xa4\x3c\x8b\x89\xc2\x0d\x5a\xd7\x4d\xad\x51\xa8\x5d\xf7\x3c\x36\x65\xf1\x34\x65\x46\x97\xe4\xd5\x6a\xda\x63\xec\xd1\x69\x2c\xb7\xc3\xa7\x24\xfb\x64\xaf\xf7\xc1\xa0\x6e\x4c\xf1\x0e\x85\x6c\x95\xed\xad\x1c\x2f\x5c\xae\xf5\xa3\x5f\xd5\x37\x9b\xd6\x3c\x36\xe3\x33\x41\xb6\xaa\xc2\x87\x77\xf0\x41\x07\xee\xc0\x06\xf0\xbb\x77\x26\xa8\xca\xda\x49\xe7\x31\x64\x75\xf2\x59\xd9\x7f\x49\xaf\xfc\x06\xff\x6d\x96\xac\x5e\xe3\x4c\x15\xde\x5b\x7b\x32\xe5\xba\x46\x67\x64\xbb\x06\x13\x16\xad\x3e\x52\x75\xd3\x34\x59\x7d\x0e\xeb\xf7\xb7\xec\x77\x7d\xa7\xaa\x78\xb6\xaa\x5a\xdf\x94\xd4\x99\x66\xa9\xd9\x59\x2b\xcb\x74\xfe\xcf\x7a\x02\xc0\x44\xa2\x91\xf6\xec\x95\xe0\x84\x33\xec\x6d\x93\xe8\x96\xd7\xb4\xee\xd9\xab\x2b\xba\xf9\x28\x50\xf6\x31\xeb\x53\xca\x6e\xa6\x35\x64\xb6\x99\x61\x64\xfc\x50\xbc\x9a\x2c\x0b\x68\xa2\x69\x21\x9e\x65\x0c\xc6\xb0\x10\x9c\xcd\x41\x2a\xa2\x72\x09\x11\x8f\xb1\x07\x73\xae\x74\x4d\xb0\x20\x4c\xd9\x6c\x5d\x1a\x6a\x5b\x8e\xad\xde\x6b\xa8\x76\x97\x1e\xff\x6a\x8e\xad\x23\xe5\x8e\x14\x5b\xb7\xdd\x30\xac\xba\xab\x8b\x63\xd9\x90\x2e\x2f\xdf\x5f\x05\xdb\x00\xbd\x98\x88\x6b\x03\x6e\x5f\x1e\x6e\xb0\xb6\xd1\xce\xb7\x54\x2b\x5b\x4c\xef\x6e\x4a\xb6\x5b\x2c\x26\x19\xad\x39\x94\x33\x5b\xc4\x60\x5c\x54\x84\x41\x2b\x59\x9b\x34\x18\xa1\x12\x14\xef\xf6\x27\xc2\x36\x01\xfb\x50\x61\x3b\xa8\x17\x90\x61\x9b\xb0\x3d\xe8\xb0\x83\xcd\x26\x2f\xfd\x89\xf9\x70\x94\x24\x7b\x5d\x3d\x5b\xf6\x1b\x36\x7c\xdd\x8d\x08\x1f\xfe\xfc\x39\xe1\x39\xf1\xb7\x7a\x77\x0f\x5e\xaf\x91\xf5\x0a\x5a\xaf\x3f\xbb\xf2\x6d\xd1\xd6\x6f\x30\xc5\x88\xe4\xba\x60\xce\x28\x50\x09\x27\xc3\xf1\x71\x17\x2e\x7b\x57\xfa\x43\x26\x34\x42\xdd\x0f\x92\x24\x01\x22\x04\x79\x00\x4c\x30\x45\x66\x5f\x24\x4d\xfb\x66\xfa\xac\xf5\xa5\xe0\x46\x76\xf4\x74\xc9\x65\xca\xba\x2e\x7c\x7d\xfe\x92\x61\x6c\x5c\x13\x7e\x97\xf4\xaa\xec\x1f\xcd\xcf\xcd\xb1\xd6\x72\x12\xaf\x8a\x36\xe3\xc1\x27\xc7\xb4\x47\x55\xd0\x7d\xd9\x58\xd5\x6f\x8d\xb9\xcd\xdb\xdb\x12\xf0\xe6\x36\x22\xd8\x86\xe7\x05\x2c\xdd\x2c\x6a\x0f\x92\x6e\x35\x76\x63\xe6\xdd\x6c\xf8\xff\x20\xf1\x1e\x1e\x02\xb2\x58\x37\x47\x61\x18\x63\x82\xba\xc5\x4c\x12\xdb\xa4\x52\x56\x86\x47\xf1\x20\xaa\x38\x90\x28\xe2\x69\xca\xb5\x15\x30\xe3\x02\xe9\x9c\xc1\x0d\x3e\xc8\xd6\xc6\x7a\x64\x77\xd7\xfd\x75\x4d\xb9\x13\xa3\x6b\x6f\xca\x6d\xde\xde\x6c\x30\xb6\xdd\xf5\xdb\x80\xbc\x80\x6b\x9b\x45\xed\xc1\xb5\xad\x56\x6a\xae\x55\xff\x29\xf6\xbb\x57\x35\xfd\x97\xf3\xcc\x36\x0d\x23\xbe\xb0\x5d\xc3\x19\x1f\xf1\x85\xbb\x6c\x69\x2d\x5c\xde\x26\x5a\xac\x59\x24\x9f\x3d\xf0\xbe\xa4\xdc\xb1\xff\x3b\x0e\xe3\x05\x06\xd7\xa4\xb9\x5a\xe1\x77\x29\xc9\xec\x03\xd3\xd3\x0a\x83\xf7\xad\x53\x36\xee\x6e\xf2\x77\x8b\x9a\x17\xd3\xf3\xfb\x5d\xd7\xdb\x4c\x78\x45\xfd\xf1\xdf\x2a\x40\x8c\xdc\x04\x59\xf9\x9c\x0a\x03\x78\xff\xbd\xf9\xbd\x4f\x69\xd3\xc2\x60\x4d\xb6\x2a\x39\xff\x27\x00\x00\xff\xff\xba\x7f\xcd\x53\x81\x26\x00\x00")

func api_testTxtBytes() ([]byte, error) {
	return bindataRead(
		_api_testTxt,
		"api_test.txt",
	)
}

func api_testTxt() (*asset, error) {
	bytes, err := api_testTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api_test.txt", size: 9857, mode: os.FileMode(420), modTime: time.Unix(1583197411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.txt":      apiTxt,
	"api_test.txt": api_testTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.txt":      &bintree{apiTxt, map[string]*bintree{}},
	"api_test.txt": &bintree{api_testTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
